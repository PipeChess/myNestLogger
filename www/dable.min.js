/*! Dable v1.2.1 (https://github.com/deltreey/Dable) */
!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define("Dable", e) : t.Dable = e();
}(this, function() {
    "use strict";
    function t(e, r) {
        for (var i in r) Object.prototype.hasOwnProperty.call(r, i) && (e[i] = "object" == typeof r[i] && null !== r[i] ? t(r[i].constructor(), r[i]) : r[i]);
        return e;
    }
    function e(t, e) {
        var r = Array.prototype.slice.call(arguments, 2);
        return function() {
            var i = Array.prototype.slice.call(arguments, 0);
            return t.apply(e, r.concat(i));
        };
    }
    function r(t) {
        return function() {
            t.sortFunc(this);
        };
    }
    function i(t) {
        return function() {
            t.searchFunc(this);
        };
    }
    function s() {}
    function o(t, e) {
        for (var r = 0; r < t.length; ++r) if (t[r] === e) return !0;
        return !1;
    }
    function n(t) {
        t.removeAttribute("style");
        var e = t.children;
        if (e && e.length > 0) for (var r = 0; r < e.length; ++r) n(e[r]);
    }
    function a(t) {
        var e;
        "createEvent" in document ? ((e = document.createEvent("KeyboardEvent")).initEvent("keyup", !0, !0, window, !1, !1, !1, !1, 38, 38), 
        t.dispatchEvent(e)) : ((e = document.createEventObject("KeyboardEvent")).keyCode = 38, 
        t.fireEvent("onkeyup", e));
    }
    function l(e) {
        t(this, l.defaults), this.BuildAll(e);
    }
    var h = function(t) {
        var e;
        e = 0 === this.rowObjects.length ? 0 : this.rowObjects[this.rowObjects.length - 1].RowNumber + 1, 
        this.rows.push(t), this.rowObjects.push({
            Row: t,
            RowNumber: e
        }), a(document.querySelector("#" + this.id + "_search"));
    }, u = function(t) {
        this.dableClass && t.setAttribute("class", this.dableClass);
        var e = t.querySelector("table");
        e.setAttribute("style", "width: 100%;"), this.tableClass && e.setAttribute("class", this.tableClass);
        for (var r = t.querySelectorAll("." + this.oddRowClass), i = 0; i < r.length; ++i) r[i].setAttribute("style", "background-color: " + this.oddRowColor);
        for (var s = t.querySelectorAll("." + this.evenRowClass), o = 0; o < s.length; ++o) s[o].setAttribute("style", "background-color: " + this.evenRowColor);
        for (var n = t.querySelectorAll("tbody td"), a = 0; a < n.length; ++a) n[a].setAttribute("style", "padding: 5px;");
        for (var l = t.querySelectorAll("th"), h = 0; h < l.length; ++h) l[h].setAttribute("style", "padding: 5px;"), 
        l[h].children[0].setAttribute("style", "float: left"), !1 !== this.columnData[h].CustomSortFunc ? (l[h].children[1].setAttribute("style", "float: right"), 
        l[h].children[2].setAttribute("style", "clear: both;"), l[h].onmouseover = function() {
            this.setAttribute("style", "padding: 5px; cursor: pointer");
        }, l[h].onmouseout = function() {
            this.setAttribute("style", "padding: 5px; cursor: default");
        }) : l[h].children[1].setAttribute("style", "clear: both;");
        var u = t.querySelector("#" + this.id + "_header");
        u.setAttribute("style", "padding: 5px;"), this.headerClass && u.setAttribute("class", this.headerClass), 
        u.children[0].setAttribute("style", "float: left;"), u.children[1].setAttribute("style", "float: right;"), 
        u.children[2].setAttribute("style", "clear: both;");
        var d = t.querySelector("#" + this.id + "_footer");
        d.setAttribute("style", "padding: 5px;"), this.footerClass && d.setAttribute("class", this.footerClass), 
        d.children[0].setAttribute("style", "float: left;"), d.children[2].setAttribute("style", "clear: both;");
        var c = d.children[1];
        c.setAttribute("style", "float: right; list-style: none;");
        for (var p = c.querySelectorAll("li"), b = 0; b < p.length; ++b) p[b].setAttribute("style", "display: inline; margin-right: 5px;");
    }, d = function(t) {
        if (!t) return !1;
        var e = document.createElement("span"), r = t.querySelector("#" + this.id + "_header"), i = t.querySelector("#" + this.id + "_footer"), s = t.querySelector("table");
        s.setAttribute("class", "table table-bordered table-striped"), s.setAttribute("style", "width: 100%; margin-bottom: 0;"), 
        r.setAttribute("class", "panel-heading"), i.setAttribute("class", "panel-footer"), 
        t.setAttribute("class", "panel panel-info"), t.setAttribute("style", "margin-bottom: 0;");
        for (var o = s.querySelectorAll("tbody tr"), a = 0; a < o.length; ++a) o[a].removeAttribute("style");
        for (var l = s.querySelectorAll("th"), h = 0; h < l.length; ++h) {
            var u = l[h].querySelector("." + this.sortClass);
            u && (9660 == u.innerText.charCodeAt(0) ? u.setAttribute("class", this.sortClass + " glyphicon glyphicon-chevron-down") : 9650 == u.innerText.charCodeAt(0) && u.setAttribute("class", this.sortClass + " glyphicon glyphicon-chevron-up"), 
            u.innerHTML = "");
        }
        for (var d = "btn btn-default " + this.pagerButtonsClass, c = i.querySelector("#" + this.id + "_page_prev"), p = i.querySelector("#" + this.id + "_page_next"), b = c.parentElement, g = i.querySelectorAll("li"), f = 0; f < g.length; ++f) n(g[f]);
        b.setAttribute("class", "btn-group"), c.innerHTML = "";
        var y = e.cloneNode(!1);
        y.setAttribute("class", "glyphicon glyphicon-arrow-left"), c.appendChild(y), p.innerHTML = "";
        var m = e.cloneNode(!1);
        if (m.setAttribute("class", "glyphicon glyphicon-arrow-right"), p.appendChild(m), 
        this.pagerIncludeFirstAndLast) {
            var v = i.querySelector("#" + this.id + "_page_first"), w = i.querySelector("#" + this.id + "_page_last");
            v.innerHTML = "";
            var C = e.cloneNode(!1);
            C.setAttribute("class", "glyphicon glyphicon-fast-backward"), v.appendChild(C), 
            w.innerHTML = "";
            var S = e.cloneNode(!1);
            S.setAttribute("class", "glyphicon glyphicon-fast-forward"), w.appendChild(S);
        }
        for (var A = i.querySelectorAll("." + this.pagerButtonsClass), R = 0; R < A.length; ++R) A[R].setAttribute("class", d);
    }, c = function(t) {
        if (!t) return !1;
        var e = t.querySelector("#" + this.id + "_header"), r = t.querySelector("#" + this.id + "_footer"), i = document.createElement("span");
        e.setAttribute("class", "fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix");
        for (var s = t.querySelectorAll("th"), o = 0; o < s.length; ++o) {
            s[o].setAttribute("class", "ui-state-default");
            var a = s[o].querySelector("." + this.sortClass);
            a && (9660 == a.innerText.charCodeAt(0) ? a.setAttribute("class", this.sortClass + " ui-icon ui-icon-triangle-1-s") : 9650 == a.innerText.charCodeAt(0) && a.setAttribute("class", this.sortClass + " ui-icon ui-icon-triangle-1-n"), 
            a.innerHTML = "");
        }
        for (var l = r.querySelectorAll("li"), h = 0; h < l.length; ++h) n(l[h]);
        r.setAttribute("class", "fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix");
        for (var u = "fg-button ui-button ui-state-default ui-corner-left " + this.pagerButtonsClass, d = r.querySelectorAll("." + this.pagerButtonsClass), c = 0; c < d.length; ++c) d[c].setAttribute("class", u);
        var p = r.querySelector("#" + this.id + "_page_prev");
        p.innerHTML = "";
        var b = i.cloneNode(!1);
        b.setAttribute("class", "ui-icon ui-icon-circle-arrow-w"), p.appendChild(b), p.getAttribute("disabled") && p.setAttribute("class", u + " ui-state-disabled");
        var g = r.querySelector("#" + this.id + "_page_next");
        g.innerHTML = "";
        var f = i.cloneNode(!1);
        if (f.setAttribute("class", "ui-icon ui-icon-circle-arrow-e"), g.appendChild(f), 
        g.getAttribute("disabled") && g.setAttribute("class", u + " ui-state-disabled"), 
        this.pagerIncludeFirstAndLast) {
            var y = r.querySelector("#" + this.id + "_page_first"), m = r.querySelector("#" + this.id + "_page_last");
            y.innerHTML = "";
            var v = i.cloneNode(!1);
            v.setAttribute("class", "ui-icon ui-icon-arrowthickstop-1-w"), y.appendChild(v), 
            m.innerHTML = "";
            var w = i.cloneNode(!1);
            w.setAttribute("class", "ui-icon ui-icon-arrowthickstop-1-e"), m.appendChild(w);
        }
    }, p = function(t) {
        t || (t = e(function(t) {
            if (t) throw t;
            this.UpdateDisplayedRows(), this.UpdateStyle();
        }, this));
        var r = !0;
        this.sortOrder.length > 3 && "desc" == this.sortOrder.substr(0, 4).toLowerCase() && (r = !1), 
        this.asyncRequest(this.asyncStart, this.currentFilter, this.sortColumn, r, t);
    }, b = function(t, e, r, i, s) {
        var o = this;
        void 0 === s && (s = !1);
        var n = new XMLHttpRequest();
        n.onreadystatechange = function() {
            if (4 == n.readyState && 200 == n.status) {
                var e = JSON.parse(n.responseText), r = e;
                e.rows === undefined && (r = JSON.parse(e.d));
                var i = r.rows;
                if (i === undefined) {
                    if (console.error("Error, no rows in data from source"), s) return s("Error, no rows in data from source");
                    return;
                }
                if (r.includedRowCount === undefined) {
                    if (console.error("Error, no includedRowCount in data from source"), s) return s("Error, no includedRowCount in data from source");
                    return;
                }
                if (r.rowCount === undefined) {
                    if (console.error("Error, no rowCount in data from source"), s) return s("Error, no rowCount in data from source");
                    return;
                }
                i.reverse();
                for (var a = 0; a < t; ++a) i.push([]);
                i.reverse();
                for (var l = t + o.asyncLength; l < r.includedRowCount; ++l) i.push([]);
                o.SetDataAsRows(i), this.RowCount = function() {
                    return r.rowCount;
                }, this.VisibleRowCount = function() {
                    return r.includedRowCount;
                }, !1 !== s && Boolean(s && s.call && s.apply) && s();
            }
        }, n.open("POST", this.async, !1 !== s), n.setRequestHeader("content-type", "application/json");
        var a = JSON.parse(JSON.stringify(this.asyncData));
        a.start = t, this.asyncStart = t, a.count = this.asyncLength, a.filter = e, a.sortColumn = null === r ? -1 : r, 
        a.ascending = i, n.send(JSON.stringify(a));
    }, g = function(t, e, r) {
        for (var i = !0, s = !0, o = r.slice(0), n = 0; n < r.length; ++n) {
            "nan" == parseInt(r[n].Row[t], 10).toString().toLowerCase() && (i = !1);
            var a = r[n].Row[t].toString().split("/");
            (3 != a.length || a[0].length < 1 || a[0].length > 2 || a[1].length < 1 || a[1].length > 2 || 2 != a[2].length && 4 != a[2].length) && (s = !1);
        }
        return o = s ? o.sort(function(e, r) {
            var i = e.Row[t].split("/"), s = i[2].toString(), o = i[0].toString(), n = i[1].toString();
            2 == s.length && (s = "20" + s), 1 == o.length && (o = "0" + o), 1 == n.length && (n = "0" + n);
            var a = s + o + n, l = r.Row[t].split("/"), h = l[2].toString(), u = l[0].toString(), d = l[1].toString();
            2 == h.length && (h = "20" + h), 1 == u.length && (u = "0" + u), 1 == d.length && (d = "0" + d);
            var c = h + u + d;
            return parseInt(a, 10) - parseInt(c, 10);
        }) : i ? o.sort(function(e, r) {
            return parseInt(e.Row[t], 10) - parseInt(r.Row[t], 10);
        }) : o.sort(function(e, r) {
            return e.Row[t] > r.Row[t] ? 1 : e.Row[t] < r.Row[t] ? -1 : 0;
        }), e || (o = o.reverse()), o;
    }, f = function(t) {
        var r = this.CheckForTable(t);
        if (!r) return !1;
        var i = document.getElementById(r);
        if (!i) return !1;
        if (this.async) this.asyncRequest(0, "", -1, !0, e(function(t) {
            if (t) throw t;
            i.innerHTML = "";
            var e = this.BuildHeader(i), r = this.BuildTable(i), s = this.BuildFooter(i);
            i.appendChild(e), i.appendChild(r), i.appendChild(s), this.UpdateStyle(i);
        }, this)); else {
            i.innerHTML = "";
            var s = this.BuildHeader(i), o = this.BuildTable(i), n = this.BuildFooter(i);
            i.appendChild(s), i.appendChild(o), i.appendChild(n), this.UpdateStyle(i);
        }
    }, y = function(t) {
        if (!t) return !1;
        var e = document.createElement("div"), r = document.createElement("span"), i = e.cloneNode(!1), s = r.cloneNode(!1);
        s.id = this.id + "_showing", i.appendChild(s);
        var o = this.BuildPager(a), n = e.cloneNode(!1), a = e.cloneNode(!1);
        return a.id = this.id + "_footer", a.innerHTML = "", a.appendChild(i), a.appendChild(o), 
        a.appendChild(n), this.UpdateFooter(a);
    }, m = function(t) {
        if (!t) return !1;
        var e = document.createElement("div"), r = document.createElement("span"), s = document.createElement("select"), o = document.createElement("option"), n = document.createElement("input"), a = e.cloneNode(!1), l = r.cloneNode(!1);
        l.innerHTML = "Show ", a.appendChild(l);
        for (var h = s.cloneNode(!1), u = 0; u < this.pageSizes.length; ++u) {
            var d = o.cloneNode(!1);
            d.innerHTML = this.pageSizes[u], d.setAttribute("value", this.pageSizes[u]), h.appendChild(d);
        }
        var c = this;
        h.onchange = function() {
            var e = this.value;
            c.pageSize = parseInt(e, 10), c.UpdateDisplayedRows(document.getElementById(c.id + "_body")), 
            c.UpdateStyle(t);
        };
        for (var p = h.querySelectorAll("option"), b = 0; b < p.length; ++b) if (p[b].value == c.pageSize) {
            p[b].selected = !0;
            break;
        }
        a.appendChild(h);
        var g = e.cloneNode(!1), f = r.cloneNode(!1);
        f.innerHTML = "Search ", g.appendChild(f);
        var y = n.cloneNode(!1);
        y.setAttribute("id", this.id + "_search"), y.onkeyup = i(this), g.appendChild(y);
        var m = e.cloneNode(!1), v = e.cloneNode(!1);
        return v.id = this.id + "_header", v.appendChild(a), v.appendChild(g), v.appendChild(m), 
        v;
    }, v = function() {
        var t = document.createElement("ul"), r = document.createElement("li"), i = document.createElement("a"), o = t.cloneNode(!1);
        if (this.pagerIncludeFirstAndLast) {
            var n = r.cloneNode(!1), a = i.cloneNode(!1);
            a.innerHTML = "First", n.setAttribute("class", this.pagerButtonsClass), n.id = this.id + "_page_first", 
            n.onclick = e(this.FirstPage, this), this.pageNumber <= 0 && (n.setAttribute("disabled", "disabled"), 
            n.onclick = s), n.appendChild(a), o.appendChild(n);
        }
        var l = r.cloneNode(!1), h = i.cloneNode(!1);
        if (h.innerHTML = "Prev", l.setAttribute("class", this.pagerButtonsClass), l.id = this.id + "_page_prev", 
        l.onclick = e(this.PreviousPage, this), this.pageNumber <= 0 && (l.setAttribute("disabled", "disabled"), 
        l.onclick = s), l.appendChild(h), o.appendChild(l), this.pagerSize > 0) {
            var u = this.pageNumber - parseInt(this.pagerSize / 2, 10), d = u + this.pagerSize;
            this.pageNumber <= this.pagerSize / 2 ? (u = 0, (d = this.pagerSize) > this.NumberOfPages() && (d = this.NumberOfPages())) : this.NumberOfPages() - this.pageNumber <= this.pagerSize / 2 && (d = this.NumberOfPages(), 
            u = this.NumberOfPages() - this.pagerSize);
            for (var c = u; c < d; ++c) {
                var p = r.cloneNode(!1), b = i.cloneNode(!1);
                b.innerHTML = (c + 1).toString(), p.onclick = e(this.GoToPage, this, c), p.setAttribute("class", this.pagerButtonsClass), 
                c == this.pageNumber && (p.setAttribute("disabled", "disabled"), p.onclick = s), 
                p.appendChild(b), o.appendChild(p);
            }
        }
        var g = r.cloneNode(!1), f = i.cloneNode(!1);
        if (f.innerHTML = "Next", g.setAttribute("class", this.pagerButtonsClass), g.id = this.id + "_page_next", 
        g.onclick = e(this.NextPage, this), this.NumberOfPages() - 1 == this.pageNumber && (g.setAttribute("disabled", "disabled"), 
        g.onclick = s), g.appendChild(f), o.appendChild(g), this.pagerIncludeFirstAndLast) {
            var y = r.cloneNode(!1), m = i.cloneNode(!1);
            m.innerHTML = "Last", y.setAttribute("class", this.pagerButtonsClass), y.id = this.id + "_page_last", 
            y.onclick = e(this.LastPage, this), this.NumberOfPages() - 1 == this.pageNumber && (y.setAttribute("disabled", "disabled"), 
            y.onclick = s), y.appendChild(m), o.appendChild(y);
        }
        return o;
    }, w = function(t) {
        if (!t) return !1;
        for (var e = document.createElement("table"), i = document.createElement("thead"), s = document.createElement("th"), o = document.createElement("tbody"), n = document.createElement("tr"), a = document.createElement("span"), l = n.cloneNode(!1), h = 0; h < this.columnData.length; ++h) {
            var u = s.cloneNode(!1), d = a.cloneNode(!1);
            if (d.innerHTML = this.columnData[h].FriendlyName + " ", u.appendChild(d), !1 !== this.columnData[h].CustomSortFunc) {
                var c = a.cloneNode(!1);
                c.setAttribute("class", this.sortClass), c.innerHTML = "v", u.appendChild(c), u.onclick = r(this);
            }
            var p = a.cloneNode(!1);
            u.appendChild(p), u.setAttribute("data-tag", this.columnData[h].Tag), l.appendChild(u);
        }
        if (i.appendChild(l), e.appendChild(i), this.visibleRows = this.rows.slice(0), this.visibleRowObjects = this.rowObjects.slice(0), 
        o = this.UpdateDisplayedRows(o), o.id = this.id + "_body", e.appendChild(o), this.tfoothtml) {
            var b = document.createElement("tfoot");
            b.innerHTML = this.tfoothtml, e.appendChild(b);
        }
        return e;
    }, C = function(t) {
        if (t) {
            t.nodeType && "div" == t.nodeName.toLowerCase() ? t.hasAttribute("id") ? this.id = t.getAttribute("id") : (this.id = "Dable1", 
            t.setAttribute("id", "Dable1")) : window.jQuery && t instanceof jQuery && t[0].nodeType ? t[0].hasAttribute("id") ? this.id = t[0].getAttribute("id") : (this.id = "Dable1", 
            t[0].setAttribute("id", "Dable1")) : this.id = t.toString();
            var e = document.getElementById(this.id);
            if (e && this.rows && this.rows.length < 1) {
                var r = e.querySelector("table");
                if (r) //Make it a Dable!
                return e.hasAttribute("class") && (this.dableClass = e.getAttribute("class")), this.GenerateTableFromHtml(r);
            }
            return this.id;
        }
        return !1;
    }, S = {
        id: "",
        columns: [],
        rows: [],
        rowObjects: [],
        visibleRows: [],
        visibleRowObjects: [],
        hiddenColumns: [],
        currentFilter: "",
        sortColumn: null,
        sortOrder: "descending",
        minimumSearchLength: 1,
        columnData: [],
        pageNumber: 0,
        pageSize: 10,
        pageSizes: [ 10, 25, 50, 100 ],
        pagerSize: 0,
        pagerIncludeFirstAndLast: !1,
        async: !1,
        asyncData: {},
        asyncStart: 0,
        asyncLength: 1e3,
        tfoothtml: "",
        style: "none",
        evenRowColor: "#E2E4FF",
        oddRowColor: "white",
        dableClass: "",
        headerClass: "",
        tableClass: "",
        sortClass: "table-sort",
        evenRowClass: "table-row-even",
        oddRowClass: "table-row-odd",
        footerClass: "",
        pagerButtonsClass: "table-page"
    }, A = function(t) {
        for (var e = 0; e < this.rowObjects.length; ++e) if (this.rowObjects[e].RowNumber == t) {
            this.rowObjects.splice(e, 1), this.rows = this.CreateRowsFromObjects(this.rowObjects);
            break;
        }
        for (var r = 0; r < this.visibleRowObjects.length; ++r) this.visibleRowObjects[r].RowNumber == t && (this.visibleRowObjects.splice(r, 1), 
        this.visibleRows = this.CreateRowsFromObjects(this.visibleRowObjects));
        a(document.querySelector("#" + this.id + "_search"));
    }, R = function(t) {
        var e = !1, r = "";
        return t ? t && t.nodeType && "div" == t.nodeName.toLowerCase() ? r = t.id : t && window.jQuery && t instanceof jQuery && t[0].nodeType ? r = t[0].id : t && (r = t) : r = this.id, 
        r += "_header", document.getElementById(r) && (e = !0), e;
    }, N = [ function(t, e) {
        t = t.toString().toLowerCase(), e = e.toString().toLowerCase();
        for (var r, i = [], s = /\s*".*?"\s*/g; r = s.exec(t); ) {
            var o = r[0].replace(/"/g, "").trim();
            i.push(o), t = t.replace(r[0], " ");
        }
        for (var n = 0; n < i.length; ++n) if (e.indexOf(i[n]) > -1) return !0;
        return !1;
    }, function(t, e) {
        t = t.toString().toLowerCase(), e = e.toString().toLowerCase();
        for (var r, i = /\s*".*?"\s*/g; r = i.exec(t); ) t = t.replace(r[0], " ");
        for (var s = t.split(" "), o = 0; o < s.length; ++o) s[o] || (s.splice(o, 1), --o);
        for (var n = 0; n < s.length; ++n) if (e.indexOf(s[n]) > -1) return !0;
        return !1;
    } ], O = function(t) {
        if (!t) return console.error("Dable Error: No HTML table to generate dable from"), 
        !1;
        t.hasAttribute("class") && (this.tableClass = t.getAttribute("class"));
        var e = t.querySelector("thead");
        if (!e) return console.error("Dable Error: No thead element in table"), !1;
        var r = e.querySelectorAll("tr th"), i = t.querySelector("tfoot");
        i && (this.tfoothtml = i.innerHTML);
        for (var s = [], o = 0; o < r.length; ++o) s.push(r[o].innerHTML);
        this.SetColumnNames(s);
        var n = t.querySelector("tbody").rows, a = [];
        n.length > 1 && n[0].hasAttribute("class") && n[1].hasAttribute("class") && (this.evenRowClass = n[0].getAttribute("class"), 
        this.oddRowClass = n[1].getAttribute("class"));
        for (var l = 0; l < n.length; ++l) {
            a.push([]);
            for (var h = n[l].children, u = 0; u < h.length; ++u) a[l].push(h[u].innerHTML);
        }
        this.SetDataAsRows(a);
        var d = t.parentElement;
        return d.innerHTML = "", d.id;
    }, L = function(t) {
        if (this.pageNumber = t, this.async && (this.asyncStart > this.pageNumber * this.pageSize || this.pageNumber * this.pageSize >= this.asyncStart + this.asyncLength)) {
            var r = this.pageNumber * this.pageSize, i = !0;
            this.sortOrder.length > 3 && "desc" == this.sortOrder.substr(0, 4).toLowerCase() && (i = !1), 
            this.asyncRequest(r, this.currentFilter, this.sortColumn, i, e(function(t) {
                if (t) throw t;
                this.UpdateDisplayedRows(document.getElementById(this.id + "_body")), this.UpdateStyle();
            }, this));
        } else this.UpdateDisplayedRows(document.getElementById(this.id + "_body")), this.UpdateStyle();
    }, T = function() {
        if (this.pageNumber = this.NumberOfPages() - 1, this.async && (this.asyncStart > this.pageNumber * this.pageSize || this.pageNumber * this.pageSize > this.asyncStart + this.asyncLength)) {
            var t = 0, r = 1e3 / this.pageSize - 1;
            this.pageNumber - r > -1 && (t = (this.pageNumber - r) * this.pageSize);
            var i = !0;
            this.sortOrder.length > 3 && "desc" == this.sortOrder.substr(0, 4).toLowerCase() && (i = !1), 
            this.asyncRequest(t, this.currentFilter, this.sortColumn, i, e(function(t) {
                if (t) throw t;
                this.UpdateDisplayedRows(document.getElementById(this.id + "_body")), this.UpdateStyle();
            }, this));
        } else this.UpdateDisplayedRows(document.getElementById(this.id + "_body")), this.UpdateStyle();
    }, E = function(t) {
        t.removeAttribute("class");
        for (var e = t.children, r = 0; r < e.length; ++r) e[r].removeAttribute("class");
        for (var i = e[0].children, s = 0; s < i.length; ++s) i[s].removeAttribute("class");
        var o = e[1], a = o.children[0];
        a.removeAttribute("class"), a.children[0].removeAttribute("class");
        for (var l = a.children[0].children, h = 0; h < l.length; ++h) l[h].removeAttribute("class");
        for (var u = t.querySelectorAll("." + this.sortClass), d = 0; d < u.length; ++d) u[d].innerHTML = "", 
        u[d].setAttribute("class", this.sortClass), u[d].parentElement.cellIndex === this.sortColumn && (u[d].innerHTML = "&#9650;", 
        "desc" == this.sortOrder.toLowerCase().substr(0, 4) && (u[d].innerHTML = "&#9660;"));
        var c = o.children[1];
        c.removeAttribute("class");
        for (var p = e[2], b = p.children[0].children, g = 0; g < b.length; ++g) b[g].removeAttribute("class");
        var f = p.querySelector("#" + this.id + "_page_prev").parentElement;
        p.replaceChild(this.BuildPager(), f), t.removeAttribute("style"), n(e[0]), e[1].removeAttribute("style"), 
        n(e[2]), n(a), n(c);
    }, _ = function(t) {
        if (t.id != this.id + "_search") return !1;
        if (!t.value || t.value.length < this.minimumSearchLength) this.currentFilter = ""; else {
            var r = t.value;
            this.currentFilter = r;
        }
        if (this.async) {
            var i = !0;
            this.sortOrder.length > 3 && "desc" == this.sortOrder.substr(0, 4).toLowerCase() && (i = !1), 
            this.asyncRequest(0, this.currentFilter, this.sortColumn, i, e(function(t) {
                if (t) throw t;
                var e = document.getElementById(this.id + "_body");
                this.UpdateDisplayedRows(e), this.UpdateStyle(document.getElementById(this.id));
            }, this));
        } else {
            var s = [], n = [];
            if (this.currentFilter) {
                for (var a = 0; a < this.filters.length; ++a) for (var l = 0; l < this.rows.length; ++l) if (!o(s, this.rows[l])) for (var h = 0; h < this.rows[l].length; ++h) if (this.filters[a](this.currentFilter, this.rows[l][h])) {
                    s.push(this.rows[l]), n.push(this.rowObjects[l]);
                    break;
                }
            } else s = this.rows, n = this.rowObjects;
            this.visibleRows = s, this.visibleRowObjects = n;
            var u = document.getElementById(this.id + "_body");
            this.UpdateDisplayedRows(u), this.UpdateStyle(document.getElementById(this.id));
        }
    }, q = function(t) {
        if (!t) return !1;
        for (var e = 0; e < t.length; ++e) this.columnData.length <= e ? this.columnData.push({
            Tag: t[e],
            FriendlyName: t[e],
            CustomSortFunc: null,
            CustomRendering: null
        }) : this.columnData[e].Name = t[e];
    }, j = function(t) {
        if (!t) return !1;
        for (var e = [], r = 0; r < t.length; ++r) {
            for (;e.length < t[r].length; ) e.push([]);
            for (var i = 0; i < t[r].length; ++i) e[i][r] = t[r][i];
        }
        this.columns = t, this.rows = e, this.rowObjects = this.CreateObjectsFromRows(e), 
        this.visibleRows = this.rows.slice(0), this.visibleRowObjects = this.rowObjects.slice(0);
    }, F = function(t) {
        if (!t) return !1;
        for (var e = [], r = 0; r < t.length; ++r) {
            for (;e.length < t[r].length; ) e.push([]);
            for (var i = 0; i < t[r].length; ++i) e[i][r] = t[r][i];
        }
        this.columns = e, this.rows = t, this.rowObjects = this.CreateObjectsFromRows(t), 
        this.visibleRows = t.slice(0), this.visibleRowObjects = this.rowObjects.slice(0);
    }, B = function(t) {
        var r = t.tagName;
        if ("INPUT" != r && "BUTTON" != r && "SELECT" != r && "TEXTAREA" != r) {
            for (var i = t.querySelector("." + this.sortClass), s = t.getAttribute("data-tag"), o = -1, n = 0; n < this.columnData.length; ++n) if (this.columnData[n].Tag.toLowerCase() == s.toLowerCase()) {
                o = n;
                break;
            }
            if (-1 == o) return !1;
            this.sortColumn = o;
            var a = !1;
            this.sortOrder.length > 3 && "desc" == this.sortOrder.substr(0, 4).toLowerCase() && (a = !0), 
            a ? (this.sortOrder = "asc", i.innerHTML = "^") : (this.sortOrder = "desc", i.innerHTML = "v"), 
            this.async ? this.asyncRequest(this.asyncStart, this.currentFilter, o, a, e(function(t) {
                if (t) throw t;
                this.visibleRows = this.CreateRowsFromObjects(this.visibleRowObjects), this.UpdateDisplayedRows(document.getElementById(this.id + "_body")), 
                this.UpdateStyle();
            }, this)) : this.columnData[o].CustomSortFunc ? (this.visibleRowObjects = this.columnData[o].CustomSortFunc(o, a, this.visibleRowObjects), 
            this.visibleRows = this.CreateRowsFromObjects(this.visibleRowObjects), this.UpdateDisplayedRows(document.getElementById(this.id + "_body")), 
            this.UpdateStyle()) : (this.visibleRowObjects = this.baseSort(o, a, this.visibleRowObjects), 
            this.visibleRows = this.CreateRowsFromObjects(this.visibleRowObjects), this.UpdateDisplayedRows(document.getElementById(this.id + "_body")), 
            this.UpdateStyle());
        }
    }, H = function(t) {
        if (!t && !(t = document.getElementById(this.id + "_body"))) return !1;
        for (var e = t.cloneNode(!1); e.firstChild; ) e.removeChild(e.firstChild);
        var r = document.createElement("tr"), i = document.createElement("td"), s = this.pageNumber * this.pageSize;
        this.VisibleRowCount() <= s && (this.pageNumber = 0, s = 0);
        var o = s + this.pageSize;
        s + this.pageSize >= this.VisibleRowCount() && (o = this.VisibleRowCount());
        for (var n = s; n < o; ++n) {
            var a = r.cloneNode(!1);
            n % 2 == 0 ? a.setAttribute("class", this.evenRowClass) : a.setAttribute("class", this.oddRowClass);
            for (var l = 0; l < this.visibleRows[n].length; ++l) {
                var h = i.cloneNode(!1), u = this.visibleRows[n][l];
                null !== this.columnData[l].CustomRendering && (u = this.columnData[l].CustomRendering(u, this.visibleRowObjects[n].RowNumber)), 
                h.innerHTML = u, a.appendChild(h);
            }
            e.appendChild(a);
        }
        t.parentElement && t.parentElement.replaceChild(e, t), t = e;
        var d = document.getElementById(this.id + "_footer");
        return this.UpdateFooter(d), t;
    }, D = function(t) {
        if (!t) return !1;
        var e = this.pageNumber * this.pageSize + 1, r = e + this.pageSize - 1;
        r > this.VisibleRowCount() && (r = this.VisibleRowCount());
        var i = t.querySelector("#" + this.id + "_showing");
        i && (0 === this.RowCount() ? i.innerHTML = "There are no entries" : 0 === this.VisibleRowCount() ? i.innerHTML = "Showing 0 entries" : i.innerHTML = "Showing " + e + " to " + r + " of " + this.VisibleRowCount() + " entries", 
        this.VisibleRowCount() != this.RowCount() && (i.innerHTML += " (filtered from " + this.RowCount() + " total entries)"));
        var s = t.querySelector("#" + this.id + "_page_prev").parentElement;
        return t.replaceChild(this.BuildPager(), s), t;
    }, M = function(t, e) {
        if (!t && !(t = document.getElementById(this.id))) return !1;
        if (e || (e = this.style), this.style = e, this.RemoveStyles(t), "clear" != e.toLowerCase()) {
            if (this.ApplyBaseStyles(t), "none" == e.toLowerCase()) return !0;
            "jqueryui" == e.toLowerCase() ? this.ApplyJqueryUIStyles(t) : "bootstrap" == e.toLowerCase() && this.ApplyBootstrapStyles(t);
        }
    };
    return "undefined" != typeof console && "undefined" != typeof console.error || (console = {
        error: function() {}
    }), l.defaults = S, l.prototype.RowCount = function() {
        return this.rows.length;
    }, l.prototype.VisibleRowCount = function() {
        return this.visibleRows.length;
    }, l.prototype.NumberOfPages = function() {
        var t = this.VisibleRowCount() / this.pageSize;
        return Math.ceil(t);
    }, l.prototype.GetPageForRow = function(t) {
        return Math.ceil(t / this.pageSize);
    }, l.prototype.asyncRequest = b, l.prototype.asyncReload = p, l.prototype.searchFunc = _, 
    l.prototype.sortFunc = B, l.prototype.baseSort = g, l.prototype.filters = N, l.prototype.SetColumnNames = q, 
    l.prototype.DeleteRow = A, l.prototype.AddRow = h, l.prototype.CreateObjectsFromRows = function(t) {
        for (var e = [], r = 0; r < t.length; ++r) e.push({
            Row: t[r],
            RowNumber: r
        });
        return e;
    }, l.prototype.CreateRowsFromObjects = function(t) {
        for (var e = [], r = 0; r < t.length; ++r) e.push(t[r].Row);
        return e;
    }, l.prototype.SetDataAsColumns = j, l.prototype.SetDataAsRows = F, l.prototype.UpdateDisplayedRows = H, 
    l.prototype.UpdateFooter = D, l.prototype.UpdateStyle = M, l.prototype.RemoveStyles = E, 
    l.prototype.ApplyBaseStyles = u, l.prototype.ApplyJqueryUIStyles = c, l.prototype.ApplyBootstrapStyles = d, 
    l.prototype.CheckForTable = C, l.prototype.GenerateTableFromHtml = O, l.prototype.Exists = R, 
    l.prototype.BuildAll = f, l.prototype.BuildHeader = m, l.prototype.BuildTable = w, 
    l.prototype.BuildFooter = y, l.prototype.BuildPager = v, l.prototype.GoToPage = L, 
    l.prototype.FirstPage = function() {
        this.pageNumber = 0, this.GoToPage(this.pageNumber);
    }, l.prototype.PreviousPage = function() {
        this.pageNumber -= 1, this.GoToPage(this.pageNumber);
    }, l.prototype.NextPage = function() {
        this.pageNumber += 1, this.GoToPage(this.pageNumber);
    }, l.prototype.LastPage = T, l;
});
